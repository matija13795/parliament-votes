from core.models import MEP
from django.core.management.base import BaseCommand
from django.conf import settings
import datetime
import psycopg2
import csv
import os

class Command(BaseCommand):
    help = 'Imports MEP data from a CSV file into the database'

    def handle(self, *args, **options):
        # Define the path to the CSV file relative to the BASE_DIR
        csv_file_path = os.path.join(settings.BASE_DIR, 'meps.csv')

        try:
            # Open the CSV file and read it row by row
            with open(csv_file_path, 'r') as f:
                reader = csv.DictReader(f)

                # Process each row and save it to the database
                for row in reader:
                    mep_id = row.get('mep_id')

                    if mep_id in ['573', '622', '325', '94', '473', '457', '109', '330', '275', '297', '485', '206', '587', '486', '113', '581', '140', '623', '404', '635', '350', '313', '625', '388', '524', '92', '294', '356', '341', '349', '641', '633', '460', '476', '136', '143', '478', '124', '379', '503', '458', '121', '586', '552', '304', '504', '337', '163', '397', '375', '424', '153', '434', '564', '117', '536', '242', '438', '226', '483', '643', '530', '386', '324', '298', '271', '148', '115', '300', '246', '475', '374', '133', '259', '408', '241', '570', '542', '342', '376', '265', '603', '534', '261', '207', '319', '169', '151', '166', '370', '97', '155', '262', '398', '464', '550', '114', '430', '158', '466', '116', '546', '419', '431', '548', '557', '364', '568', '127', '378', '201', '327', '368', '517', '549', '387', '203', '500', '600', '577', '170', '247', '167', '611', '601', '154', '264', '565', '420', '200', '137', '316', '299', '484', '279', '288', '106', '567', '406', '571', '472', '493', '491', '417', '394', '363', '334', '631', '513', '507', '593', '400', '150', '255', '230', '272', '426', '381', '251', '338', '627', '305', '462', '359', '165', '579', '468', '228', '252', '266', '632', '156', '190', '445', '422', '135', '371', '354', '545', '108', '644', '213', '613', '650', '217', '597', '561', '589', '218', '543', '280', '441', '216', '640', '584', '239', '323', '636', '451', '307', '537', '329', '454', '157', '333', '209', '306', '344', '126', '382', '351', '514', '409', '358', '427', '615', '224', '91', '95', '276', '558', '634', '303', '346', '556', '267', '174', '497', '508', '100', '269', '352', '502', '98', '599', '551', '766', '612', '175', '637', '192', '335', '626', '202', '574', '161', '412', '461', '509', '257', '481', '410', '498', '407', '208', '134', '253', '240', '149', '273', '302', '322', '539', '437', '620', '515', '317', '176', '310', '145', '223', '285', '452', '187', '414', '184', '428', '191', '284', '391', '365', '248', '204', '343', '315', '595', '103', '173', '353', '642', '101', '123', '318', '147', '621', '494', '532', '528', '413', '416', '348', '172', '489', '383', '471', '480', '336', '450', '274', '93', '258', '592', '629', '146', '518', '96', '345', '429', '544', '380', '182', '328', '118', '540', '243', '159', '575', '129', '628', '263', '196', '164', '293', '292', '168', '326', '499', '392', '99', '432', '487', '278', '222', '610', '399', '435', '291', '130', '618', '385', '215', '606', '362', '193', '572', '369', '197', '221', '177', '585', '347', '231', '402', '138', '290', '482', '541', '389', '465', '616', '390', '236', '112', '511', '562', '250', '179', '563', '308', '178', '519', '531', '501', '495', '423', '547', '395', '526', '186', '617', '205', '411', '219', '527', '396', '195', '488', '361', '455', '442', '446', '533', '254', '630', '401', '286', '602', '594', '559', '448', '604', '119', '529', '538', '227', '444', '256', '403', '144', '225', '311', '185', '490', '638', '609', '443', '287', '492', '477', '260', '449', '425', '569', '142', '510', '555', '199', '367', '384', '520', '405', '649', '309', '624', '245', '523', '436', '580', '160', '590', '496', '463', '120', '554', '512', '105', '467', '506', '128', '296', '578', '421', '314', '607', '619', '183', '459', '605', '110', '104', '560', '366', '447', '211', '339', '651', '415', '301', '553', '639', '474', '229', '340', '268', '331', '102', '372', '249', '111', '171', '453', '645', '469', '522', '212', '139', '162', '588', '440', '355', '582', '244', '320', '131', '152', '277', '214', '598', '107', '188', '470', '210', '332', '525', '596', '189', '125', '141', '373', '583', '439', '566', '282', '521', '180', '360', '283', '321', '418', '608', '614', '456', '194', '516', '132', '377', '479', '576', '289', '393', '1853', '34253', '34233', '1860', '26152', '33993', '34001', '23733', '1846', '112749', '23732', '23851', '23871', '1850', '1848', '112758', '23876', '1851', '23841', '25950', '112746', '23936', '33999', '23935', '23861', '23870', '112756', '34255', '23846', '33983', '33965', '129141', '23731', '23744', '1857', '23769', '1847', '33980', '112754', '1855', '1856', '23875', '112759', '34228']:
                        continue

                    first_name = row.get('first_name', '')
                    last_name = row.get('last_name', '')

                    if first_name == '':
                        full_name = last_name

                    elif last_name == '':
                        full_name = first_name

                    else:
                        full_name = row.get('first_name') + " " + row.get('last_name')
                    
                    gender = row.get('gender', '')

                    date_of_birth = row.get('date_of_birth')
                    date_of_death = row['date_of_death']
                    
                    if date_of_death == '':
                        date_of_death = None

                    if date_of_birth == '':
                        date_of_birth = None

                    hometown = row.get('hometown', '')
                    country_of_representation = row.get('country_of_representation', '')

                    mep = MEP(mep_id=mep_id, first_name=first_name, last_name=last_name, full_name=full_name, gender=gender, date_of_birth=date_of_birth, date_of_death=date_of_death, hometown=hometown, country_of_representation=country_of_representation)
                    mep.save()

            self.stdout.write(self.style.SUCCESS('Successfully imported CSV data'))

        except Exception as e:
            self.stderr.write(self.style.ERROR(f'Error importing CSV data: {e}'))