from django.core.management.base import BaseCommand
from core.models import MEP, Vote, MEP_Vote_Mapping
from bs4 import BeautifulSoup
import requests
import csv
import datetime     # UNNECESSARY IMPORT!! I JUST WANTED TO SEE HOW LONG IT TAKES FOR THE SCRAPPING !!

#---------------------------
#REQUIRED packages:
#pip install beautifulsoup4
#pip install lxml
#pip install requests
#---------------------------

class Command(BaseCommand):

    def handle(self, *args, **options):

        start_time = datetime.datetime.now()  # Record the start time

        # List of *current* MEP ids for May 26th 2024. Gotten from the JSON file of the API
        MEP_IDS = ['197483', '99945', '204333', '124739', '97236', '124812', '197462', '33997', '38511', '96713', '96811', '197629', '197413', '197677', '96868', '124828', '197781', '204336', '124831', '197590', '197782', '197842', '131507', '197588', '197444', '97968', '197665', '124781', '204335', '187917', '124861', '197698', '197491', '124821', '197392', '1917', '202351', '192634', '96833', '28617', '28298', '124875', '125012', '23768', '125067', '197494', '197519', '33982', '28150', '197472', '190464', '197621', '197653', '125020', '209140', '197806', '86793', '197523', '197652', '124705', '197557', '197829', '197540', '124714', '98341', '197478', '197658', '197631', '96991', '197841', '239258', '182995', '197501', '251874', '197799', '197837', '197694', '197427', '197567', '197679', '124934', '125005', '197650', '209091', '197638', '198096', '4267', '124709', '197582', '96775', '132366', '197794', '197798', '197683', '204400', '96801', '237779', '4289', '197532', '197756', '96698', '197636', '197718', '28224', '23788', '197581', '197503', '254719', '24505', '197516', '197401', '204368', '197446', '36392', '250918', '197538', '124735', '1992', '197550', '228604', '232843', '197623', '253008', '197587', '124704', '197414', '197702', '28399', '197663', '197585', '197680', '96780', '58789', '197740', '197767', '197863', '130100', '197868', '103381', '28294', '197667', '247709', '197589', '197408', '96646', '197637', '239260', '197432', '197512', '124834', '124715', '4560', '198329', '250237', '197489', '199996', '96761', '197780', '197488', '197791', '197824', '124850', '197417', '197453', '96756', '124722', '28619', '29579', '197838', '5565', '197400', '197844', '237465', '197533', '197552', '24922', '35016', '193273', '96812', '197470', '22858', '197596', '130833', '125038', '124844', '197843', '197419', '197662', '197546', '28390', '58766', '213330', '190713', '250235', '197449', '197628', '124837', '197403', '197634', '197845', '221463', '197537', '238639', '124996', '126644', '197655', '96796', '197495', '124771', '96779', '125046', '197445', '254721', '197654', '96681', '1909', '197466', '24594', '218349', '96791', '197438', '197695', '96709', '23816', '197566', '197840', '124806', '197457', '197425', '124708', '197699', '204346', '239257', '125001', '96771', '124877', '197435', '120478', '197398', '204414', '197835', '197670', '96711', '183793', '193292', '197828', '197459', '197822', '249285', '197547', '197390', '134605', '197785', '38420', '183338', '197493', '197825', '197433', '197648', '197646', '204332', '218347', '197826', '244571', '197391', '197738', '124873', '197616', '236050', '28586', '197657', '197415', '197422', '197894', '197452', '197682', '197778', '236053', '125021', '183916', '96653', '197787', '197796', '96725', '204416', '197447', '188945', '197786', '125043', '243979', '197473', '28161', '124852', '197720', '96891', '96734', '125004', '247735', '197765', '40599', '1892', '96776', '197448', '24942', '197668', '198176', '185619', '23781', '124760', '28340', '197504', '197527', '124713', '197731', '28229', '197795', '197626', '197788', '190774', '125109', '249284', '197539', '197595', '122978', '197480', '254722', '124973', '254718', '197528', '250538', '197564', '2054', '197530', '96668', '197808', '112744', '2341', '197577', '197709', '125064', '72779', '197511', '197553', '197522', '197580', '197776', '197783', '4344', '197439', '202073', '204334', '197632', '4746', '197556', '197754', '197779', '197820', '197870', '197584', '197611', '197772', '197773', '124770', '112611', '236052', '197505', '124726', '28269', '124777', '125065', '112747', '197394', '197426', '96747', '124700', '233862', '28122', '189065', '124785', '197734', '124866', '28346', '197586', '106936', '197675', '101039', '197606', '123562', '197711', '197641', '197792', '185771', '132191', '209896', '251249', '197464', '124862', '197543', '2323', '197475', '197818', '197804', '197849', '118949', '197742', '96830', '197496', '88715', '197697', '125025', '212855', '197763', '197647', '96885', '202352', '129073', '96932', '197771', '96752', '237224', '197458', '197423', '197766', '37312', '197461', '197743', '124856', '230085', '202112', '197800', '125093', '197571', '204418', '197513', '197410', '192635', '125063', '96787', '197443', '28288', '197721', '239255', '197451', '197469', '96810', '197558', '197770', '125042', '197526', '197490', '249603', '23868', '124710', '197692', '247737', '96998', '197518', '198063', '124887', '28226', '28615', '197722', '197608', '197412', '197421', '30482', '197418', '135511', '202036', '197544', '197506', '197618', '125068', '38595', '96750', '243912', '128483', '197481', '96648', '39725', '96852', '124586', '197549', '251324', '124738', '107212', '124929', '185341', '197525', '250572', '197517', '34578', '124799', '28400', '101585', '256134', '28429', '124784', '190518', '96772', '197520', '124822', '5392', '112748', '197576', '197404', '4246', '197691', '28372', '197416', '124833', '197777', '124891', '197690', '197441', '197619', '124691', '124884', '125104', '96933', '96837', '28141', '28353', '197573', '197801', '197802', '124835', '124747', '197719', '197810', '197846', '236051', '124836', '238674', '197545', '197563', '96922', '198490', '197482', '124766', '197507', '214839', '239972', '197463', '197769', '197764', '204421', '124936', '197542', '124696', '239973', '124701', '96808', '197455', '251859', '208722', '197551', '97058', '96934', '234344', '197574', '96829', '23712', '28347', '197624', '205452', '197515', '96826', '253043', '197805', '204419', '251268', '840', '197717', '189525', '197395', '124712', '197467', '124692', '197502', '197406', '197687', '197817', '197819', '197848', '197607', '114268', '197737', '96952', '136236', '249826', '197728', '27714', '197832', '197578', '197635', '247122', '197615', '197402', '197627', '197541', '237320', '88882', '96936', '197430', '125706', '197889', '206158', '226260', '197610', '240478', '254720', '197579', '197701', '124846', '245858', '124867', '28297', '197500', '197531', '125106', '185974', '204420', '197431', '197497', '204413', '239256', '197839', '124693', '28223', '4253', '197460', '96880', '197468', '124985', '229519', '1927', '197645', '98582', '124807', '228286', '245018', '131580', '197465', '197572', '204449', '204443', '254876', '125128', '127096', '197827', '125670', '96739', '125237', '28266', '197784', '124992', '197534', '197935', '190517', '249443', '99283', '190519', '197514', '124872', '197440', '198183', '125045', '204733', '239262', '129164', '191693', '28219', '124988', '197510', '5729', '125023', '124802', '199941', '197529', '23699', '124808', '125030', '197405', '94649', '197536', '197672', '197831', '124780', '239271', '125214', '197429', '96697', '197498', '197651', '197434', '197671', '197649', '197836', '197393', '229839', '118859', '95074', '197591', '197559']
        parsed_data = []  # List to store parsed data

        for mep_id in MEP_IDS:
            # First, we have to figure out in which parliamentary terms each MEP was active in
            source = requests.get(f'https://www.europarl.europa.eu/meps/en/{mep_id}/ANYTHING_GOES/home').text
            soup = BeautifulSoup(source, 'lxml')
            mep_home_page = soup.find('div', class_ ='erpl_accordion').find_all('ul')[-1].find_all('span')
            print(mep_home_page)

            parliamentary_terms = []
            for parliamentary_term in mep_home_page:
                parliamentary_terms.append(parliamentary_term.text[0])  #parliamentary_term.text is itself a string. so index 0 gets only the #

            for parliamentary_term in parliamentary_terms[::-1]: # Going through the list in reverse, because that will actually go through the terms chronologically
                source = requests.get(f'https://www.europarl.europa.eu/meps/en/{mep_id}/ANYTHING_GOES/history/{parliamentary_term}#detailedcardmep').text
                soup = BeautifulSoup(source, 'lxml')
                political_groups = soup.find('div', class_='erpl_meps-status')

                for membership in political_groups.find_all('li'):
                    # Extract start and end date
                    if ' / ' in membership.text:
                        start_date = membership.text.split('/')[0].strip()
                        end_date = membership.text.split('/')[1].split(':')[0].strip()
                    
                    # If there is no end date, we have to treat it in a slightly different way
                    else: 
                        start_date = membership.text.split('...')[0].strip()
                        end_date = None

                    political_group = membership.text.split(':')[1].split(' - ')[0].strip()   # Extract political group

                    # Collect data for CSV
                    parsed_data.append({
                        'mep_id': mep_id,
                        'start_date': start_date,
                        'end_date': end_date,
                        'political_group': political_group
                    })

        # Write to CSV file
        with open('current_meps_membership_data.csv', 'w', newline='') as csvfile:
            fieldnames = ['mep_id', 'start_date', 'end_date', 'political_group']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            writer.writeheader()
            for data in parsed_data:
                writer.writerow(data)

        end_time = datetime.datetime.now()  # Record the end time
        print(f"Start time: {start_time}")
        print(f"End time: {end_time}")
        print(f"Data written to current_meps_membership_data.csv")
